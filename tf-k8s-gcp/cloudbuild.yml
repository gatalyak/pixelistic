steps:      
  - name: 'hashicorp/terraform:latest'
    id: Terraform
    entrypoint: 'sh'
    args: 
    - '-c'
    - | 
        cd tf-k8s-gcp/ && \
        terraform init -input=false && 
        if [ "$BRANCH_NAME" = "master" ]; then
          terraform apply --var-file=stage.tfvars -input=false -auto-approve || exit 1
        else 
          echo "***************************** SKIPPING APPLYING *******************************" && \
          echo "Branch '$BRANCH_NAME' does not allow to trigger apply." && \
          echo "*******************************************************************************" && \
          terraform plan --var-file=stage.tfvars -input=false || exit 1
        fi        
        export PIXELISTIC_CLUSTER_NAME=$(terraform output cluster_name) && \
        export PIXELISTIC_REGION=$(terraform output region) && \
        env | grep "^PIXELISTIC_" > /workspace/build_vars

  # This step builds the container image.
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Frontend
    args:
    - 'build'
    - '-t'
    - 'gcr.io/$PROJECT_ID/pixelistic_fe:$SHORT_SHA'
    - 'pixelistic_fe'
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Backend
    args:
    - 'build'
    - '-t'
    - 'gcr.io/$PROJECT_ID/pixelistic_be:$SHORT_SHA'
    - 'pixelistic_be'
  # This step pushes the image to Container Registry
  # The PROJECT_ID and SHORT_SHA variables are automatically
  # replaced by Cloud Build.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Tests
    entrypoint: /bin/bash
    args:
    - '-c'
    - |
          echo "***************************** TESTING *****************************************"
          echo "Testing..."
          echo "*******************************************************************************"
  - name: 'gcr.io/cloud-builders/docker'
    id: Push Frontend
    args:
    - 'push'
    - 'gcr.io/$PROJECT_ID/pixelistic_fe:$SHORT_SHA'
  - name: 'gcr.io/cloud-builders/docker'
    id: Push Backend
    args:
    - 'push'
    - 'gcr.io/$PROJECT_ID/pixelistic_be:$SHORT_SHA'
   # This step generates the new manifest

  - name: 'gcr.io/cloud-builders/gcloud'
    id: Generate manifests
    entrypoint: /bin/bash
    args:
    - '-c'
    - |
      cat /workspace/build_vars
      source /workspace/build_vars
      CLUSTER_NAME=$$PIXELISTIC_CLUSTER_NAME
      REGION=$$PIXELISTIC_REGION
      gcloud container clusters get-credentials --project=$PROJECT_ID --zone=$$REGION $$CLUSTER_NAME
      echo CLUSTER_NAME=$$CLUSTER_NAME REGION=$$REGION
      AWS_ACCESS_KEY_ID=$(gcloud secrets versions access --secret=AWS_ACCESS_KEY_ID latest)
      AWS_SECRET_ACCESS_KEY=$(gcloud secrets versions access --secret=AWS_SECRET_ACCESS_KEY latest)
      REACT_APP_AWS_S3=$(gcloud secrets versions access --secret=REACT_APP_AWS_S3 latest)
      DATABASE=$(gcloud secrets versions access --secret=DATABASE latest)
      AWS_REGION=$(gcloud secrets versions access --secret=AWS_REGION latest)
      AWS_S3_BUCKET=$(gcloud secrets versions access --secret=AWS_S3_BUCKET latest)
      EMAIL_USER=$(gcloud secrets versions access --secret=EMAIL_USER latest)
      EMAIL_PASS=$(gcloud secrets versions access --secret=EMAIL_PASS latest)
      FRONT_URL=$(kubectl get services pixelisticfe --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
      REACT_APP_API_WEB=$(kubectl get services pixelisticbe --output jsonpath='{.status.loadBalancer.ingress[0].ip}')    
      sed -i "s|__REP_WEB_URI__|gcr.io/$PROJECT_ID/pixelistic_fe:$SHORT_SHA|" pixelistic_fe/manifests/deployment.yml
      sed -i "s|__REACT_APP_API_WEB__|http://$$REACT_APP_API_WEB|" pixelistic_fe/manifests/deployment.yml
      sed -i "s|__REACT_APP_AWS_S3__|$$REACT_APP_AWS_S3|" pixelistic_fe/manifests/deployment.yml
      sed -i "s|__AWS_ACCESS_KEY_ID__|$$AWS_ACCESS_KEY_ID|" pixelistic_be/manifests/deployment.yml
      sed -i "s|__AWS_SECRET_ACCESS_KEY__|$$AWS_SECRET_ACCESS_KEY|" pixelistic_be/manifests/deployment.yml
      sed -i "s|__FRONT_URL__|http://$$FRONT_URL|" pixelistic_be/manifests/deployment.yml
      sed -i "s|__REP_API_URI__|gcr.io/$PROJECT_ID/pixelistic_be:$SHORT_SHA|" pixelistic_be/manifests/deployment.yml
      sed -i "s|__MONGO_DB__|mongodb://mongo-0.mongo:27017/$$DATABASE|" pixelistic_be/manifests/deployment.yml
      sed -i "s|__AWS_REGION__|$$AWS_REGION|" pixelistic_be/manifests/deployment.yml
      sed -i "s|__AWS_S3_BUCKET__|$$AWS_S3_BUCKET|" pixelistic_be/manifests/deployment.yml
      sed -i "s|__EMAIL_USER__|$$EMAIL_USER|" pixelistic_be/manifests/deployment.yml
      sed -i "s|__EMAIL_PASS__|$$EMAIL_PASS|" pixelistic_be/manifests/deployment.yml
  - name: 'gcr.io/cloud-builders/kubectl'
    id: Deploy
    entrypoint: /bin/bash
    args:
    - '-c'
    - |
      if [ "$BRANCH_NAME" = "master" ]; then
        source /workspace/build_vars
        CLUSTER_NAME=$$PIXELISTIC_CLUSTER_NAME
        REGION=$$PIXELISTIC_REGION 
        gcloud container clusters get-credentials --project=$PROJECT_ID --zone=$$REGION $$CLUSTER_NAME
        echo CLUSTER_NAME=$$CLUSTER_NAME REGION=$$REGION
        kubectl apply -f pixelistic_be/manifests/mongo-statefulset.yaml
        kubectl apply -f pixelistic_fe/manifests/deployment.yml
        kubectl apply -f pixelistic_fe/manifests/service.yml
        kubectl apply -f pixelistic_be/manifests/deployment.yml
        kubectl apply -f pixelistic_be/manifests/service.yml
        FRONT_URL=$(kubectl get services pixelisticfe --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
        BACK_URL=$(kubectl get services pixelisticbe --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo FRONT_URL=http://$$FRONT_URL
        echo BACK_URL=http://$$FRONT_URL:3000
      else
        echo "***************************** SKIPPING DEPLOYING ******************************"
        echo "Branch '$BRANCH_NAME' does not allow to trigger deployment."
        echo "*******************************************************************************"
      fi

