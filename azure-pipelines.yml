# Deploy to Azure Kubernetes Service Front
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
- group: pixelistic
  # Container registry service connection established during pipeline creation
- name: dockerRegistryServiceConnection
  value: '82e8bbb1-3614-4aed-a6fa-5ad73eb9fab1'  
- name: imageRepositoryfe
  value: 'gatalyakpixelisticfe'
- name: imageRepositorybe
  value: 'gatalyakpixelisticbe'
- name: containerRegistry
  value: 'pixelisticacr.azurecr.io'
- name: dockerfilePathfe
  value: '**/pixelistic_fe/Dockerfile'
- name: dockerfilePathbe
  value: '**/pixelistic_be/Dockerfile'
- name: tag
  value: '$(Build.BuildId)'
- name: imagePullSecretfe
  value: 'pixelisticacr6209a66c-auth'
- name:  imagePullSecretbe
  value: 'pixelisticacr6209a66c-auth'


  # Agent VM image name
- name: vmImageName
  value: 'ubuntu-latest'
  
  # Name of the new namespace being created to deploy the PR changes.
- name: k8sNamespaceForPR
  value: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: Build_fe
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepositoryfe)
        command: build
        Dockerfile: $(dockerfilePathfe)
        arguments: '--build-arg REACT_APP_API_WEB=$(REACT_APP_API_WEB) --build-arg REACT_APP_AWS_S3=$(REACT_APP_AWS_S3)'
        
    - task: Docker@2
      displayName: Push an image to container registry
      inputs:
        command: push
        repository: $(imageRepositoryfe)
        dockerfile: $(dockerfilePathfe)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: pixelistic_fe/manifests
      artifact: pixelistic_fe/manifests

- stage: Deploy_fe
  displayName: Deploy stage
  dependsOn: Build_fe

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'gatalyakpixelistic.pixelistic'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecretfe)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/pixelistic_fe/manifests/deployment.yml
                $(Pipeline.Workspace)/pixelistic_fe/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecretfe)
              containers: |
                $(containerRegistry)/$(imageRepositoryfe):$(tag)
  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)
      
    environment: 'gatalyakpixelistic.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: pixelistic

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecretfe)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/pixelistic_fe/manifests/deployment.yml
                $(Pipeline.Workspace)/pixelistic_fe/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecretfe)
              containers: |
                $(containerRegistry)/$(imageRepositoryfe):$(tag)
          
          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'
              
          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ] 
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"


# Deploy to Azure Kubernetes Service Back
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker


- stage: Build_be
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositorybe)
        dockerfile: $(dockerfilePathbe)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: pixelistic_be/manifests
      artifact: pixelistic_be/manifests

- stage: Deploy_be
  displayName: Deploy stage
  dependsOn: Build_be

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'gatalyakpixelistic.pixelistic'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: Replace tokens in **/*
            inputs:
              rootDirectory: $(Pipeline.Workspace)/pixelistic_be/manifests
              targetFiles: '**/*.yml'
              keepToken: true
              tokenPrefix: __
              tokenSuffix: __          
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecretbe)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/pixelistic_be/manifests/deployment.yml
                $(Pipeline.Workspace)/pixelistic_be/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecretbe)
              containers: |
                $(containerRegistry)/$(imageRepositorybe):$(tag)
  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)
      
    environment: 'gatalyakpixelistic.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: pixelistic

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecretbe)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/pixelistic_be/manifests/deployment.yml
                $(Pipeline.Workspace)/pixelistic_be/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecretbe)
              containers: |
                $(containerRegistry)/$(imageRepositorybe):$(tag)
          
          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'
              
          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ] 
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"


              
